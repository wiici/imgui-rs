/* automatically generated by rust-bindgen 0.66.1 */

pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    const UNINIT: ::std::mem::MaybeUninit<HWND__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
extern "C" {
    pub fn cImGui_ImplWin32_Init(hwnd: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn cImGui_ImplWin32_InitForOpenGL(hwnd: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn cImGui_ImplWin32_Shutdown();
}
extern "C" {
    pub fn cImGui_ImplWin32_NewFrame();
}
extern "C" {
    pub fn cImGui_ImplWin32_WndProcHandler(
        hWnd: HWND,
        msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
extern "C" {
    pub fn cImGui_ImplWin32_EnableDpiAwareness();
}
extern "C" {
    pub fn cImGui_ImplWin32_GetDpiScaleForHwnd(hwnd: *mut ::std::os::raw::c_void) -> f32;
}
extern "C" {
    pub fn cImGui_ImplWin32_GetDpiScaleForMonitor(monitor: *mut ::std::os::raw::c_void) -> f32;
}
extern "C" {
    pub fn cImGui_ImplWin32_EnableAlphaCompositing(hwnd: *mut ::std::os::raw::c_void);
}
