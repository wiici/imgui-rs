/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const IMGUI_VERSION: &[u8; 11] = b"1.89.9 WIP\0";
pub const IMGUI_VERSION_NUM: u32 = 18982;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &[u8; 7] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &[u8; 7] = b"_COL4F\0";
pub const IM_UNICODE_CODEPOINT_INVALID: u32 = 65533;
pub const IM_UNICODE_CODEPOINT_MAX: u32 = 65535;
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;
pub const IM_DRAWLIST_TEX_LINES_WIDTH_MAX: u32 = 63;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
}
pub type ImVec2 = ImVec2_t;
pub type ImVec4 = ImVec4_t;
pub type ImVector_ImWchar = ImVector_ImWchar_t;
pub type ImVector_ImGuiTextFilter_ImGuiTextRange = ImVector_ImGuiTextFilter_ImGuiTextRange_t;
pub type ImVector_char = ImVector_char_t;
pub type ImVector_ImGuiStorage_ImGuiStoragePair = ImVector_ImGuiStorage_ImGuiStoragePair_t;
pub type ImVector_ImDrawCmd = ImVector_ImDrawCmd_t;
pub type ImVector_ImDrawIdx = ImVector_ImDrawIdx_t;
pub type ImVector_ImDrawChannel = ImVector_ImDrawChannel_t;
pub type ImVector_ImDrawVert = ImVector_ImDrawVert_t;
pub type ImVector_ImVec4 = ImVector_ImVec4_t;
pub type ImVector_ImTextureID = ImVector_ImTextureID_t;
pub type ImVector_ImVec2 = ImVector_ImVec2_t;
pub type ImVector_ImDrawListPtr = ImVector_ImDrawListPtr_t;
pub type ImVector_ImU32 = ImVector_ImU32_t;
pub type ImVector_ImFontPtr = ImVector_ImFontPtr_t;
pub type ImVector_ImFontAtlasCustomRect = ImVector_ImFontAtlasCustomRect_t;
pub type ImVector_ImFontConfig = ImVector_ImFontConfig_t;
pub type ImVector_float = ImVector_float_t;
pub type ImVector_ImFontGlyph = ImVector_ImFontGlyph_t;
pub type ImVector_ImGuiPlatformMonitor = ImVector_ImGuiPlatformMonitor_t;
pub type ImVector_ImGuiViewportPtr = ImVector_ImGuiViewportPtr_t;
pub type ImGuiTextFilter_ImGuiTextRange = ImGuiTextFilter_ImGuiTextRange_t;
pub type ImGuiStorage_ImGuiStoragePair = ImGuiStorage_ImGuiStoragePair_t;
pub type ImDrawCmdHeader = ImDrawCmdHeader_t;
pub type ImFontAtlasCustomRect = ImFontAtlasCustomRect_t;
pub type ImDrawChannel = ImDrawChannel_t;
pub type ImDrawCmd = ImDrawCmd_t;
pub type ImDrawData = ImDrawData_t;
pub type ImDrawList = ImDrawList_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData_t {
    _unused: [u8; 0],
}
pub type ImDrawListSharedData = ImDrawListSharedData_t;
pub type ImDrawListSplitter = ImDrawListSplitter_t;
pub type ImDrawVert = ImDrawVert_t;
pub type ImFont = ImFont_t;
pub type ImFontAtlas = ImFontAtlas_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO_t {
    _unused: [u8; 0],
}
pub type ImFontBuilderIO = ImFontBuilderIO_t;
pub type ImFontConfig = ImFontConfig_t;
pub type ImFontGlyph = ImFontGlyph_t;
pub type ImFontGlyphRangesBuilder = ImFontGlyphRangesBuilder_t;
pub type ImColor = ImColor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext_t {
    _unused: [u8; 0],
}
pub type ImGuiContext = ImGuiContext_t;
pub type ImGuiIO = ImGuiIO_t;
pub type ImGuiInputTextCallbackData = ImGuiInputTextCallbackData_t;
pub type ImGuiKeyData = ImGuiKeyData_t;
pub type ImGuiListClipper = ImGuiListClipper_t;
pub type ImGuiPayload = ImGuiPayload_t;
pub type ImGuiPlatformIO = ImGuiPlatformIO_t;
pub type ImGuiPlatformMonitor = ImGuiPlatformMonitor_t;
pub type ImGuiPlatformImeData = ImGuiPlatformImeData_t;
pub type ImGuiSizeCallbackData = ImGuiSizeCallbackData_t;
pub type ImGuiStorage = ImGuiStorage_t;
pub type ImGuiStyle = ImGuiStyle_t;
pub type ImGuiTableSortSpecs = ImGuiTableSortSpecs_t;
pub type ImGuiTableColumnSortSpecs = ImGuiTableColumnSortSpecs_t;
pub type ImGuiTextBuffer = ImGuiTextBuffer_t;
pub type ImGuiTextFilter = ImGuiTextFilter_t;
pub type ImGuiViewport = ImGuiViewport_t;
pub type ImGuiWindowClass = ImGuiWindowClass_t;
pub type ImGuiKey = ::std::os::raw::c_int;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiDir = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiSortDirection = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar = ImWchar16;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2_t {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec2_t>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2_t),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec4_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec4_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec4_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec4_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec4_t),
            "::",
            stringify!(w)
        )
    );
}
extern "C" {
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn ImGui_NewFrame();
}
extern "C" {
    pub fn ImGui_EndFrame();
}
extern "C" {
    pub fn ImGui_Render();
}
extern "C" {
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImGui_ShowDebugLogWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImGui_ShowStackToolWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_ShowUserGuide();
}
extern "C" {
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_End();
}
extern "C" {
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginChildID(
        id: ImGuiID,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndChild();
}
extern "C" {
    pub fn ImGui_IsWindowAppearing() -> bool;
}
extern "C" {
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
extern "C" {
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn ImGui_GetWindowDpiScale() -> f32;
}
extern "C" {
    pub fn ImGui_GetWindowPos() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetWindowSize() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetWindowWidth() -> f32;
}
extern "C" {
    pub fn ImGui_GetWindowHeight() -> f32;
}
extern "C" {
    pub fn ImGui_GetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGui_SetNextWindowPos(pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetNextWindowPosEx(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
extern "C" {
    pub fn ImGui_SetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGui_SetNextWindowContentSize(size: ImVec2);
}
extern "C" {
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetNextWindowFocus();
}
extern "C" {
    pub fn ImGui_SetNextWindowScroll(scroll: ImVec2);
}
extern "C" {
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    pub fn ImGui_SetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    pub fn ImGui_SetWindowPos(pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetWindowSize(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetWindowFocus();
}
extern "C" {
    pub fn ImGui_SetWindowFontScale(scale: f32);
}
extern "C" {
    pub fn ImGui_SetWindowPosStr(name: *const ::std::os::raw::c_char, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetWindowSizeStr(
        name: *const ::std::os::raw::c_char,
        size: ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn ImGui_SetWindowCollapsedStr(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn ImGui_SetWindowFocusStr(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_GetContentRegionAvail() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetContentRegionMax() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetWindowContentRegionMin() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetWindowContentRegionMax() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetScrollX() -> f32;
}
extern "C" {
    pub fn ImGui_GetScrollY() -> f32;
}
extern "C" {
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
extern "C" {
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
extern "C" {
    pub fn ImGui_GetScrollMaxX() -> f32;
}
extern "C" {
    pub fn ImGui_GetScrollMaxY() -> f32;
}
extern "C" {
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    pub fn ImGui_PushFont(font: *mut ImFont);
}
extern "C" {
    pub fn ImGui_PopFont();
}
extern "C" {
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    pub fn ImGui_PushStyleColorImVec4(idx: ImGuiCol, col: ImVec4);
}
extern "C" {
    pub fn ImGui_PopStyleColor();
}
extern "C" {
    pub fn ImGui_PopStyleColorEx(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    pub fn ImGui_PushStyleVarImVec2(idx: ImGuiStyleVar, val: ImVec2);
}
extern "C" {
    pub fn ImGui_PopStyleVar();
}
extern "C" {
    pub fn ImGui_PopStyleVarEx(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_PushTabStop(tab_stop: bool);
}
extern "C" {
    pub fn ImGui_PopTabStop();
}
extern "C" {
    pub fn ImGui_PushButtonRepeat(repeat: bool);
}
extern "C" {
    pub fn ImGui_PopButtonRepeat();
}
extern "C" {
    pub fn ImGui_PushItemWidth(item_width: f32);
}
extern "C" {
    pub fn ImGui_PopItemWidth();
}
extern "C" {
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
extern "C" {
    pub fn ImGui_CalcItemWidth() -> f32;
}
extern "C" {
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    pub fn ImGui_PopTextWrapPos();
}
extern "C" {
    pub fn ImGui_GetFont() -> *mut ImFont;
}
extern "C" {
    pub fn ImGui_GetFontSize() -> f32;
}
extern "C" {
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetColorU32(idx: ImGuiCol) -> ImU32;
}
extern "C" {
    pub fn ImGui_GetColorU32Ex(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    pub fn ImGui_GetColorU32ImVec4(col: ImVec4) -> ImU32;
}
extern "C" {
    pub fn ImGui_GetColorU32ImU32(col: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    pub fn ImGui_Separator();
}
extern "C" {
    pub fn ImGui_SameLine();
}
extern "C" {
    pub fn ImGui_SameLineEx(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    pub fn ImGui_NewLine();
}
extern "C" {
    pub fn ImGui_Spacing();
}
extern "C" {
    pub fn ImGui_Dummy(size: ImVec2);
}
extern "C" {
    pub fn ImGui_Indent();
}
extern "C" {
    pub fn ImGui_IndentEx(indent_w: f32);
}
extern "C" {
    pub fn ImGui_Unindent();
}
extern "C" {
    pub fn ImGui_UnindentEx(indent_w: f32);
}
extern "C" {
    pub fn ImGui_BeginGroup();
}
extern "C" {
    pub fn ImGui_EndGroup();
}
extern "C" {
    pub fn ImGui_GetCursorPos() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetCursorPosX() -> f32;
}
extern "C" {
    pub fn ImGui_GetCursorPosY() -> f32;
}
extern "C" {
    pub fn ImGui_SetCursorPos(local_pos: ImVec2);
}
extern "C" {
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
extern "C" {
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
extern "C" {
    pub fn ImGui_GetCursorStartPos() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetCursorScreenPos() -> ImVec2;
}
extern "C" {
    pub fn ImGui_SetCursorScreenPos(pos: ImVec2);
}
extern "C" {
    pub fn ImGui_AlignTextToFramePadding();
}
extern "C" {
    pub fn ImGui_GetTextLineHeight() -> f32;
}
extern "C" {
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn ImGui_GetFrameHeight() -> f32;
}
extern "C" {
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_PushIDStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGui_PushIDPtr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn ImGui_PushIDInt(int_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_PopID();
}
extern "C" {
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_GetIDStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_GetIDPtr(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_TextUnformatted(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_TextUnformattedEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_TextColored(col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_TextColoredV(col: ImVec4, fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_SeparatorText(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_ButtonEx(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    pub fn ImGui_CheckboxFlagsIntPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_CheckboxFlagsUintPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    pub fn ImGui_RadioButtonIntPtr(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGui_Bullet();
}
extern "C" {
    pub fn ImGui_Image(user_texture_id: ImTextureID, size: ImVec2);
}
extern "C" {
    pub fn ImGui_ImageEx(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
extern "C" {
    pub fn ImGui_ImageButton(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ImageButtonEx(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndCombo();
}
extern "C" {
    pub fn ImGui_ComboChar(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ComboCharEx(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ComboEx(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ComboCallback(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ComboCallbackEx(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloatEx(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat2(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat2Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat3(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat3Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat4(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloat4Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragFloatRange2Ex(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragIntEx(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt2Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt3Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragInt4Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragIntRange2Ex(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragScalarEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_DragScalarNEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloatEx(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat2Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat3Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderFloat4Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderAngle(label: *const ::std::os::raw::c_char, v_rad: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_SliderAngleEx(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderIntEx(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt2Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt3Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderInt4Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderScalarEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SliderScalarNEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderFloatEx(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderIntEx(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_VSliderScalarEx(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputTextEx(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputTextMultilineEx(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputTextWithHintEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloatEx(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat2(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat2Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat3(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat3Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat4(label: *const ::std::os::raw::c_char, v: *mut f32) -> bool;
}
extern "C" {
    pub fn ImGui_InputFloat4Ex(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputIntEx(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputDouble(label: *const ::std::os::raw::c_char, v: *mut f64) -> bool;
}
extern "C" {
    pub fn ImGui_InputDoubleEx(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputScalarEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_InputScalarNEx(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ColorButtonEx(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeStr(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodePtr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeVPtr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeExStr(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeExPtr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreeNodeExVPtr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_TreePushPtr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn ImGui_TreePop();
}
extern "C" {
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_CollapsingHeaderBoolPtr(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_Selectable(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_SelectableEx(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SelectableBoolPtr(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SelectableBoolPtrEx(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginListBox(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_EndListBox();
}
extern "C" {
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ListBoxCallback(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_ListBoxCallbackEx(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotLinesEx(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotLinesCallback(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotLinesCallbackEx(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotHistogramEx(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotHistogramCallback(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_PlotHistogramCallbackEx(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn ImGui_BeginMenuBar() -> bool;
}
extern "C" {
    pub fn ImGui_EndMenuBar();
}
extern "C" {
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
extern "C" {
    pub fn ImGui_EndMainMenuBar();
}
extern "C" {
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_BeginMenuEx(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    pub fn ImGui_EndMenu();
}
extern "C" {
    pub fn ImGui_MenuItem(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImGui_MenuItemEx(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_MenuItemBoolPtr(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginTooltip() -> bool;
}
extern "C" {
    pub fn ImGui_EndTooltip();
}
extern "C" {
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_BeginItemTooltip() -> bool;
}
extern "C" {
    pub fn ImGui_SetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_SetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
        -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndPopup();
}
extern "C" {
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn ImGui_OpenPopupID(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    pub fn ImGui_CloseCurrentPopup();
}
extern "C" {
    pub fn ImGui_BeginPopupContextItem() -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupContextItemEx(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupContextWindow() -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupContextWindowEx(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupContextVoid() -> bool;
}
extern "C" {
    pub fn ImGui_BeginPopupContextVoidEx(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    pub fn ImGui_BeginTable(
        str_id: *const ::std::os::raw::c_char,
        column: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_BeginTableEx(
        str_id: *const ::std::os::raw::c_char,
        column: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndTable();
}
extern "C" {
    pub fn ImGui_TableNextRow();
}
extern "C" {
    pub fn ImGui_TableNextRowEx(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    pub fn ImGui_TableNextColumn() -> bool;
}
extern "C" {
    pub fn ImGui_TableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImGui_TableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
    );
}
extern "C" {
    pub fn ImGui_TableSetupColumnEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    pub fn ImGui_TableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_TableHeadersRow();
}
extern "C" {
    pub fn ImGui_TableHeader(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_TableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn ImGui_TableGetColumnCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_TableGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_TableGetRowIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_TableGetColumnName(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_TableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    pub fn ImGui_TableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
extern "C" {
    pub fn ImGui_TableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_Columns();
}
extern "C" {
    pub fn ImGui_ColumnsEx(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        border: bool,
    );
}
extern "C" {
    pub fn ImGui_NextColumn();
}
extern "C" {
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndTabBar();
}
extern "C" {
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndTabItem();
}
extern "C" {
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_DockSpace(id: ImGuiID) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_DockSpaceEx(
        id: ImGuiID,
        size: ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_DockSpaceOverViewport() -> ImGuiID;
}
extern "C" {
    pub fn ImGui_DockSpaceOverViewportEx(
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGui_SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn ImGui_SetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    pub fn ImGui_GetWindowDockID() -> ImGuiID;
}
extern "C" {
    pub fn ImGui_IsWindowDocked() -> bool;
}
extern "C" {
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_LogFinish();
}
extern "C" {
    pub fn ImGui_LogButtons();
}
extern "C" {
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGui_LogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_EndDragDropSource();
}
extern "C" {
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
extern "C" {
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    pub fn ImGui_EndDragDropTarget();
}
extern "C" {
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    pub fn ImGui_BeginDisabled(disabled: bool);
}
extern "C" {
    pub fn ImGui_EndDisabled();
}
extern "C" {
    pub fn ImGui_PushClipRect(
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn ImGui_PopClipRect();
}
extern "C" {
    pub fn ImGui_SetItemDefaultFocus();
}
extern "C" {
    pub fn ImGui_SetKeyboardFocusHere();
}
extern "C" {
    pub fn ImGui_SetKeyboardFocusHereEx(offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGui_SetNextItemAllowOverlap();
}
extern "C" {
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn ImGui_IsItemActive() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemFocused() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemClicked() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemClickedEx(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn ImGui_IsItemVisible() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemEdited() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemActivated() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemDeactivated() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
extern "C" {
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
extern "C" {
    pub fn ImGui_IsAnyItemActive() -> bool;
}
extern "C" {
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
extern "C" {
    pub fn ImGui_GetItemID() -> ImGuiID;
}
extern "C" {
    pub fn ImGui_GetItemRectMin() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetItemRectMax() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetItemRectSize() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGui_GetBackgroundDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn ImGui_GetForegroundDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn ImGui_GetBackgroundDrawListImGuiViewportPtr(
        viewport: *mut ImGuiViewport,
    ) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImGui_GetForegroundDrawListImGuiViewportPtr(
        viewport: *mut ImGuiViewport,
    ) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImGui_IsRectVisibleBySize(size: ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_IsRectVisible(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_GetTime() -> f64;
}
extern "C" {
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    pub fn ImGui_BeginChildFrame(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn ImGui_EndChildFrame();
}
extern "C" {
    pub fn ImGui_CalcTextSize(text: *const ::std::os::raw::c_char) -> ImVec2;
}
extern "C" {
    pub fn ImGui_CalcTextSizeEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2;
}
extern "C" {
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
extern "C" {
    pub fn ImGui_ColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
extern "C" {
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    pub fn ImGui_IsKeyDown(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn ImGui_IsKeyPressed(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn ImGui_IsKeyPressedEx(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    pub fn ImGui_IsKeyReleased(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn ImGui_GetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_GetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
extern "C" {
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn ImGui_IsMouseClickedEx(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn ImGui_GetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGui_IsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_IsMouseHoveringRectEx(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
extern "C" {
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
extern "C" {
    pub fn ImGui_GetMousePos() -> ImVec2;
}
extern "C" {
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}
extern "C" {
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2;
}
extern "C" {
    pub fn ImGui_ResetMouseDragDelta();
}
extern "C" {
    pub fn ImGui_ResetMouseDragDeltaEx(button: ImGuiMouseButton);
}
extern "C" {
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    pub fn ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
extern "C" {
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: usize,
    );
}
extern "C" {
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_SaveIniSettingsToMemory(out_ini_size: *mut usize)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGui_DebugTextEncoding(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGui_GetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGui_MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ImGui_GetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn ImGui_UpdatePlatformWindows();
}
extern "C" {
    pub fn ImGui_RenderPlatformWindowsDefault();
}
extern "C" {
    pub fn ImGui_RenderPlatformWindowsDefaultEx(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGui_DestroyPlatformWindows();
}
extern "C" {
    pub fn ImGui_FindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGui_FindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 1048576;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 2097152;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 786432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 786944;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 1048576;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ =
    512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir__ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir__ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir__ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir__ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir__ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir__ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::std::os::raw::c_int;
pub const ImGuiSortDirection__ImGuiSortDirection_None: ImGuiSortDirection_ = 0;
pub const ImGuiSortDirection__ImGuiSortDirection_Ascending: ImGuiSortDirection_ = 1;
pub const ImGuiSortDirection__ImGuiSortDirection_Descending: ImGuiSortDirection_ = 2;
pub type ImGuiSortDirection_ = ::std::os::raw::c_int;
pub const ImGuiKey_None: _bindgen_ty_1 = 0;
pub const ImGuiKey_Tab: _bindgen_ty_1 = 512;
pub const ImGuiKey_LeftArrow: _bindgen_ty_1 = 513;
pub const ImGuiKey_RightArrow: _bindgen_ty_1 = 514;
pub const ImGuiKey_UpArrow: _bindgen_ty_1 = 515;
pub const ImGuiKey_DownArrow: _bindgen_ty_1 = 516;
pub const ImGuiKey_PageUp: _bindgen_ty_1 = 517;
pub const ImGuiKey_PageDown: _bindgen_ty_1 = 518;
pub const ImGuiKey_Home: _bindgen_ty_1 = 519;
pub const ImGuiKey_End: _bindgen_ty_1 = 520;
pub const ImGuiKey_Insert: _bindgen_ty_1 = 521;
pub const ImGuiKey_Delete: _bindgen_ty_1 = 522;
pub const ImGuiKey_Backspace: _bindgen_ty_1 = 523;
pub const ImGuiKey_Space: _bindgen_ty_1 = 524;
pub const ImGuiKey_Enter: _bindgen_ty_1 = 525;
pub const ImGuiKey_Escape: _bindgen_ty_1 = 526;
pub const ImGuiKey_LeftCtrl: _bindgen_ty_1 = 527;
pub const ImGuiKey_LeftShift: _bindgen_ty_1 = 528;
pub const ImGuiKey_LeftAlt: _bindgen_ty_1 = 529;
pub const ImGuiKey_LeftSuper: _bindgen_ty_1 = 530;
pub const ImGuiKey_RightCtrl: _bindgen_ty_1 = 531;
pub const ImGuiKey_RightShift: _bindgen_ty_1 = 532;
pub const ImGuiKey_RightAlt: _bindgen_ty_1 = 533;
pub const ImGuiKey_RightSuper: _bindgen_ty_1 = 534;
pub const ImGuiKey_Menu: _bindgen_ty_1 = 535;
pub const ImGuiKey_0: _bindgen_ty_1 = 536;
pub const ImGuiKey_1: _bindgen_ty_1 = 537;
pub const ImGuiKey_2: _bindgen_ty_1 = 538;
pub const ImGuiKey_3: _bindgen_ty_1 = 539;
pub const ImGuiKey_4: _bindgen_ty_1 = 540;
pub const ImGuiKey_5: _bindgen_ty_1 = 541;
pub const ImGuiKey_6: _bindgen_ty_1 = 542;
pub const ImGuiKey_7: _bindgen_ty_1 = 543;
pub const ImGuiKey_8: _bindgen_ty_1 = 544;
pub const ImGuiKey_9: _bindgen_ty_1 = 545;
pub const ImGuiKey_A: _bindgen_ty_1 = 546;
pub const ImGuiKey_B: _bindgen_ty_1 = 547;
pub const ImGuiKey_C: _bindgen_ty_1 = 548;
pub const ImGuiKey_D: _bindgen_ty_1 = 549;
pub const ImGuiKey_E: _bindgen_ty_1 = 550;
pub const ImGuiKey_F: _bindgen_ty_1 = 551;
pub const ImGuiKey_G: _bindgen_ty_1 = 552;
pub const ImGuiKey_H: _bindgen_ty_1 = 553;
pub const ImGuiKey_I: _bindgen_ty_1 = 554;
pub const ImGuiKey_J: _bindgen_ty_1 = 555;
pub const ImGuiKey_K: _bindgen_ty_1 = 556;
pub const ImGuiKey_L: _bindgen_ty_1 = 557;
pub const ImGuiKey_M: _bindgen_ty_1 = 558;
pub const ImGuiKey_N: _bindgen_ty_1 = 559;
pub const ImGuiKey_O: _bindgen_ty_1 = 560;
pub const ImGuiKey_P: _bindgen_ty_1 = 561;
pub const ImGuiKey_Q: _bindgen_ty_1 = 562;
pub const ImGuiKey_R: _bindgen_ty_1 = 563;
pub const ImGuiKey_S: _bindgen_ty_1 = 564;
pub const ImGuiKey_T: _bindgen_ty_1 = 565;
pub const ImGuiKey_U: _bindgen_ty_1 = 566;
pub const ImGuiKey_V: _bindgen_ty_1 = 567;
pub const ImGuiKey_W: _bindgen_ty_1 = 568;
pub const ImGuiKey_X: _bindgen_ty_1 = 569;
pub const ImGuiKey_Y: _bindgen_ty_1 = 570;
pub const ImGuiKey_Z: _bindgen_ty_1 = 571;
pub const ImGuiKey_F1: _bindgen_ty_1 = 572;
pub const ImGuiKey_F2: _bindgen_ty_1 = 573;
pub const ImGuiKey_F3: _bindgen_ty_1 = 574;
pub const ImGuiKey_F4: _bindgen_ty_1 = 575;
pub const ImGuiKey_F5: _bindgen_ty_1 = 576;
pub const ImGuiKey_F6: _bindgen_ty_1 = 577;
pub const ImGuiKey_F7: _bindgen_ty_1 = 578;
pub const ImGuiKey_F8: _bindgen_ty_1 = 579;
pub const ImGuiKey_F9: _bindgen_ty_1 = 580;
pub const ImGuiKey_F10: _bindgen_ty_1 = 581;
pub const ImGuiKey_F11: _bindgen_ty_1 = 582;
pub const ImGuiKey_F12: _bindgen_ty_1 = 583;
pub const ImGuiKey_Apostrophe: _bindgen_ty_1 = 584;
pub const ImGuiKey_Comma: _bindgen_ty_1 = 585;
pub const ImGuiKey_Minus: _bindgen_ty_1 = 586;
pub const ImGuiKey_Period: _bindgen_ty_1 = 587;
pub const ImGuiKey_Slash: _bindgen_ty_1 = 588;
pub const ImGuiKey_Semicolon: _bindgen_ty_1 = 589;
pub const ImGuiKey_Equal: _bindgen_ty_1 = 590;
pub const ImGuiKey_LeftBracket: _bindgen_ty_1 = 591;
pub const ImGuiKey_Backslash: _bindgen_ty_1 = 592;
pub const ImGuiKey_RightBracket: _bindgen_ty_1 = 593;
pub const ImGuiKey_GraveAccent: _bindgen_ty_1 = 594;
pub const ImGuiKey_CapsLock: _bindgen_ty_1 = 595;
pub const ImGuiKey_ScrollLock: _bindgen_ty_1 = 596;
pub const ImGuiKey_NumLock: _bindgen_ty_1 = 597;
pub const ImGuiKey_PrintScreen: _bindgen_ty_1 = 598;
pub const ImGuiKey_Pause: _bindgen_ty_1 = 599;
pub const ImGuiKey_Keypad0: _bindgen_ty_1 = 600;
pub const ImGuiKey_Keypad1: _bindgen_ty_1 = 601;
pub const ImGuiKey_Keypad2: _bindgen_ty_1 = 602;
pub const ImGuiKey_Keypad3: _bindgen_ty_1 = 603;
pub const ImGuiKey_Keypad4: _bindgen_ty_1 = 604;
pub const ImGuiKey_Keypad5: _bindgen_ty_1 = 605;
pub const ImGuiKey_Keypad6: _bindgen_ty_1 = 606;
pub const ImGuiKey_Keypad7: _bindgen_ty_1 = 607;
pub const ImGuiKey_Keypad8: _bindgen_ty_1 = 608;
pub const ImGuiKey_Keypad9: _bindgen_ty_1 = 609;
pub const ImGuiKey_KeypadDecimal: _bindgen_ty_1 = 610;
pub const ImGuiKey_KeypadDivide: _bindgen_ty_1 = 611;
pub const ImGuiKey_KeypadMultiply: _bindgen_ty_1 = 612;
pub const ImGuiKey_KeypadSubtract: _bindgen_ty_1 = 613;
pub const ImGuiKey_KeypadAdd: _bindgen_ty_1 = 614;
pub const ImGuiKey_KeypadEnter: _bindgen_ty_1 = 615;
pub const ImGuiKey_KeypadEqual: _bindgen_ty_1 = 616;
pub const ImGuiKey_GamepadStart: _bindgen_ty_1 = 617;
pub const ImGuiKey_GamepadBack: _bindgen_ty_1 = 618;
pub const ImGuiKey_GamepadFaceLeft: _bindgen_ty_1 = 619;
pub const ImGuiKey_GamepadFaceRight: _bindgen_ty_1 = 620;
pub const ImGuiKey_GamepadFaceUp: _bindgen_ty_1 = 621;
pub const ImGuiKey_GamepadFaceDown: _bindgen_ty_1 = 622;
pub const ImGuiKey_GamepadDpadLeft: _bindgen_ty_1 = 623;
pub const ImGuiKey_GamepadDpadRight: _bindgen_ty_1 = 624;
pub const ImGuiKey_GamepadDpadUp: _bindgen_ty_1 = 625;
pub const ImGuiKey_GamepadDpadDown: _bindgen_ty_1 = 626;
pub const ImGuiKey_GamepadL1: _bindgen_ty_1 = 627;
pub const ImGuiKey_GamepadR1: _bindgen_ty_1 = 628;
pub const ImGuiKey_GamepadL2: _bindgen_ty_1 = 629;
pub const ImGuiKey_GamepadR2: _bindgen_ty_1 = 630;
pub const ImGuiKey_GamepadL3: _bindgen_ty_1 = 631;
pub const ImGuiKey_GamepadR3: _bindgen_ty_1 = 632;
pub const ImGuiKey_GamepadLStickLeft: _bindgen_ty_1 = 633;
pub const ImGuiKey_GamepadLStickRight: _bindgen_ty_1 = 634;
pub const ImGuiKey_GamepadLStickUp: _bindgen_ty_1 = 635;
pub const ImGuiKey_GamepadLStickDown: _bindgen_ty_1 = 636;
pub const ImGuiKey_GamepadRStickLeft: _bindgen_ty_1 = 637;
pub const ImGuiKey_GamepadRStickRight: _bindgen_ty_1 = 638;
pub const ImGuiKey_GamepadRStickUp: _bindgen_ty_1 = 639;
pub const ImGuiKey_GamepadRStickDown: _bindgen_ty_1 = 640;
pub const ImGuiKey_MouseLeft: _bindgen_ty_1 = 641;
pub const ImGuiKey_MouseRight: _bindgen_ty_1 = 642;
pub const ImGuiKey_MouseMiddle: _bindgen_ty_1 = 643;
pub const ImGuiKey_MouseX1: _bindgen_ty_1 = 644;
pub const ImGuiKey_MouseX2: _bindgen_ty_1 = 645;
pub const ImGuiKey_MouseWheelX: _bindgen_ty_1 = 646;
pub const ImGuiKey_MouseWheelY: _bindgen_ty_1 = 647;
pub const ImGuiKey_ReservedForModCtrl: _bindgen_ty_1 = 648;
pub const ImGuiKey_ReservedForModShift: _bindgen_ty_1 = 649;
pub const ImGuiKey_ReservedForModAlt: _bindgen_ty_1 = 650;
pub const ImGuiKey_ReservedForModSuper: _bindgen_ty_1 = 651;
pub const ImGuiKey_COUNT: _bindgen_ty_1 = 652;
pub const ImGuiMod_None: _bindgen_ty_1 = 0;
pub const ImGuiMod_Ctrl: _bindgen_ty_1 = 4096;
pub const ImGuiMod_Shift: _bindgen_ty_1 = 8192;
pub const ImGuiMod_Alt: _bindgen_ty_1 = 16384;
pub const ImGuiMod_Super: _bindgen_ty_1 = 32768;
pub const ImGuiMod_Shortcut: _bindgen_ty_1 = 2048;
pub const ImGuiMod_Mask_: _bindgen_ty_1 = 63488;
pub const ImGuiKey_NamedKey_BEGIN: _bindgen_ty_1 = 512;
pub const ImGuiKey_NamedKey_END: _bindgen_ty_1 = 652;
pub const ImGuiKey_NamedKey_COUNT: _bindgen_ty_1 = 140;
pub const ImGuiKey_KeysData_SIZE: _bindgen_ty_1 = 652;
pub const ImGuiKey_KeysData_OFFSET: _bindgen_ty_1 = 0;
pub const ImGuiKey_ModCtrl: _bindgen_ty_1 = 4096;
pub const ImGuiKey_ModShift: _bindgen_ty_1 = 8192;
pub const ImGuiKey_ModAlt: _bindgen_ty_1 = 16384;
pub const ImGuiKey_ModSuper: _bindgen_ty_1 = 32768;
pub const ImGuiKey_KeyPadEnter: _bindgen_ty_1 = 615;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const ImGuiNavInput_ImGuiNavInput_Activate: ImGuiNavInput = 0;
pub const ImGuiNavInput_ImGuiNavInput_Cancel: ImGuiNavInput = 1;
pub const ImGuiNavInput_ImGuiNavInput_Input: ImGuiNavInput = 2;
pub const ImGuiNavInput_ImGuiNavInput_Menu: ImGuiNavInput = 3;
pub const ImGuiNavInput_ImGuiNavInput_DpadLeft: ImGuiNavInput = 4;
pub const ImGuiNavInput_ImGuiNavInput_DpadRight: ImGuiNavInput = 5;
pub const ImGuiNavInput_ImGuiNavInput_DpadUp: ImGuiNavInput = 6;
pub const ImGuiNavInput_ImGuiNavInput_DpadDown: ImGuiNavInput = 7;
pub const ImGuiNavInput_ImGuiNavInput_LStickLeft: ImGuiNavInput = 8;
pub const ImGuiNavInput_ImGuiNavInput_LStickRight: ImGuiNavInput = 9;
pub const ImGuiNavInput_ImGuiNavInput_LStickUp: ImGuiNavInput = 10;
pub const ImGuiNavInput_ImGuiNavInput_LStickDown: ImGuiNavInput = 11;
pub const ImGuiNavInput_ImGuiNavInput_FocusPrev: ImGuiNavInput = 12;
pub const ImGuiNavInput_ImGuiNavInput_FocusNext: ImGuiNavInput = 13;
pub const ImGuiNavInput_ImGuiNavInput_TweakSlow: ImGuiNavInput = 14;
pub const ImGuiNavInput_ImGuiNavInput_TweakFast: ImGuiNavInput = 15;
pub const ImGuiNavInput_ImGuiNavInput_COUNT: ImGuiNavInput = 16;
pub type ImGuiNavInput = ::std::os::raw::c_int;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 55;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar__ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 29;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_Mouse: _bindgen_ty_2 = 0;
pub const ImGuiMouseSource_TouchScreen: _bindgen_ty_2 = 1;
pub const ImGuiMouseSource_Pen: _bindgen_ty_2 = 2;
pub const ImGuiMouseSource_COUNT: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
extern "C" {
    pub fn ImVector_Construct(vector: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ImVector_Destruct(vector: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImWchar_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextFilter_ImGuiTextRange_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextFilter_ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextFilter_ImGuiTextRange_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTextFilter_ImGuiTextRange_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextFilter_ImGuiTextRange_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ImVector_ImGuiTextFilter_ImGuiTextRange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextFilter_ImGuiTextRange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImGuiTextFilter_ImGuiTextRange_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextFilter_ImGuiTextRange_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextFilter_ImGuiTextRange_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextFilter_ImGuiTextRange_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_char_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_char_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStorage_ImGuiStoragePair_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStorage_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStorage_ImGuiStoragePair_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStorage_ImGuiStoragePair_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStorage_ImGuiStoragePair_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ImVector_ImGuiStorage_ImGuiStoragePair_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStorage_ImGuiStoragePair_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImGuiStorage_ImGuiStoragePair_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStorage_ImGuiStoragePair_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStorage_ImGuiStoragePair_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStorage_ImGuiStoragePair_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawCmd_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawIdx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawChannel_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawVert_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImTextureID_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawListPtr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU32_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontPtr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontAtlasCustomRect_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImFontAtlasCustomRect_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontConfig_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_float_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_float_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontGlyph_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPlatformMonitor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr_t {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiViewportPtr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr_t),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr_t),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle_t {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 55usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
}
#[test]
fn bindgen_test_layout_ImGuiStyle_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStyle_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle_t>(),
        1124usize,
        concat!("Size of: ", stringify!(ImGuiStyle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledAlpha) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(DisabledAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMinSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowTitleAlign) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMenuButtonPosition) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildRounding) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildBorderSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupRounding) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupBorderSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameRounding) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameBorderSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemSpacing) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemInnerSpacing) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellPadding) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(CellPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TouchExtraPadding) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndentSpacing) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsMinSpacing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarSize) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarRounding) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabMinSize) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabRounding) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogSliderDeadzone) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabRounding) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBorderSize) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabMinWidthForCloseButton) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorButtonPosition) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ButtonTextAlign) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectableTextAlign) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextBorderSize) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(SeparatorTextBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextAlign) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(SeparatorTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextPadding) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(SeparatorTextPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayWindowPadding) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySafeAreaPadding) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingSeparatorSize) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(DockingSeparatorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCursorScale) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLines) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLinesUseTex) as usize - ptr as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedFill) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CircleTessellationMaxError) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(CircleTessellationMaxError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(Colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverStationaryDelay) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(HoverStationaryDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayShort) as usize - ptr as usize },
        1108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(HoverDelayShort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayNormal) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(HoverDelayNormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipMouse) as usize - ptr as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(HoverFlagsForTooltipMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipNav) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle_t),
            "::",
            stringify!(HoverFlagsForTooltipNav)
        )
    );
}
extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData_t {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiKeyData_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyData_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyData_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiKeyData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyData_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData_t),
            "::",
            stringify!(Down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDuration) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData_t),
            "::",
            stringify!(DownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDurationPrev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData_t),
            "::",
            stringify!(DownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData_t),
            "::",
            stringify!(AnalogValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIO_t {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub SetPlatformImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(viewport: *mut ImGuiViewport, data: *mut ImGuiPlatformImeData),
    >,
    pub ImeWindowHandle: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MetricsActiveAllocations: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub KeyMap: [::std::os::raw::c_int; 652usize],
    pub KeysDown: [bool; 652usize],
    pub NavInputs: [f32; 16usize],
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 652usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub BackendUsingLegacyKeyArrays: ImS8,
    pub BackendUsingLegacyNavInputArray: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[test]
fn bindgen_test_layout_ImGuiIO_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiIO_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO_t>(),
        14328usize,
        concat!("Size of: ", stringify!(ImGuiIO_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeltaTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(DeltaTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniSavingRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniFilename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(IniFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogFilename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(LogFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontGlobalScale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontAllowUserScaling) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDefault) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(FontDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayFramebufferScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingNoSplit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDockingNoSplit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingWithShift) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDockingWithShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingAlwaysTabBar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDockingTransparentPayload) as usize - ptr as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDockingTransparentPayload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoAutoMerge) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigViewportsNoAutoMerge)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoTaskBarIcon) as usize - ptr as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigViewportsNoTaskBarIcon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDecoration) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigViewportsNoDecoration)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDefaultParent) as usize - ptr as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigViewportsNoDefaultParent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDrawCursor) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMacOSXBehaviors) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTrickleEventQueue) as usize - ptr as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigInputTrickleEventQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigInputTextCursorBlink) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTextEnterKeepActive) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigInputTextEnterKeepActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDragClickToInputText) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDragClickToInputText)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsResizeFromEdges) as usize - ptr as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsMoveFromTitleBarOnly) as usize - ptr as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMemoryCompactTimer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickTime) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickMaxDist) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragThreshold) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatDelay) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatRate) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueOnce) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDebugBeginReturnValueOnce)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueLoop) as usize - ptr as usize
        },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDebugBeginReturnValueLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIgnoreFocusLoss) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDebugIgnoreFocusLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIniSettings) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ConfigDebugIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformName) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererName) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformUserData) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererUserData) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendLanguageUserData) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClipboardTextFn) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetClipboardTextFn) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipboardUserData) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPlatformImeDataFn) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(SetPlatformImeDataFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImeWindowHandle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(ImeWindowHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureMouse) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureKeyboard) as usize - ptr as usize },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantTextInput) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSetMousePos) as usize - ptr as usize },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSaveIniSettings) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActive) as usize - ptr as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(NavActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavVisible) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(NavVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Framerate) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(Framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderVertices) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderIndices) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderWindows) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsActiveWindows) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsActiveAllocations) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MetricsActiveAllocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDelta) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyMap) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysDown) as usize - ptr as usize },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeysDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInputs) as usize - ptr as usize },
        3508usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(NavInputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDown) as usize - ptr as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize },
        3600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelH) as usize - ptr as usize },
        3604usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseWheelH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        3608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseHoveredViewport) as usize - ptr as usize },
        3612usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyCtrl) as usize - ptr as usize },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyCtrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyShift) as usize - ptr as usize },
        3617usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyAlt) as usize - ptr as usize },
        3618usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeySuper) as usize - ptr as usize },
        3619usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeySuper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyMods) as usize - ptr as usize },
        3620usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeyMods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysData) as usize - ptr as usize },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(KeysData)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WantCaptureMouseUnlessPopupClose) as usize - ptr as usize
        },
        14056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(WantCaptureMouseUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePosPrev) as usize - ptr as usize },
        14060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MousePosPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedPos) as usize - ptr as usize },
        14068usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedTime) as usize - ptr as usize },
        14112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClicked) as usize - ptr as usize },
        14152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClicked) as usize - ptr as usize },
        14157usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedCount) as usize - ptr as usize },
        14162usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseClickedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedLastCount) as usize - ptr as usize },
        14172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseClickedLastCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseReleased) as usize - ptr as usize },
        14182usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownOwned) as usize - ptr as usize },
        14187usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MouseDownOwnedUnlessPopupClose) as usize - ptr as usize
        },
        14192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDownOwnedUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelRequestAxisSwap) as usize - ptr as usize },
        14197usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseWheelRequestAxisSwap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDuration) as usize - ptr as usize },
        14200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDurationPrev) as usize - ptr as usize },
        14220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceAbs) as usize - ptr as usize },
        14240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceSqr) as usize - ptr as usize },
        14280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PenPressure) as usize - ptr as usize },
        14300usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(PenPressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppFocusLost) as usize - ptr as usize },
        14304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(AppFocusLost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppAcceptingEvents) as usize - ptr as usize },
        14305usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(AppAcceptingEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendUsingLegacyKeyArrays) as usize - ptr as usize },
        14306usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendUsingLegacyKeyArrays)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackendUsingLegacyNavInputArray) as usize - ptr as usize
        },
        14307usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(BackendUsingLegacyNavInputArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueSurrogate) as usize - ptr as usize },
        14308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueCharacters) as usize - ptr as usize },
        14312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO_t),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
}
extern "C" {
    pub fn ImGuiIO_AddKeyEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
extern "C" {
    pub fn ImGuiIO_AddKeyAnalogEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMousePosEvent(self_: *mut ImGuiIO, x: f32, y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseButtonEvent(
        self_: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
extern "C" {
    pub fn ImGuiIO_AddMouseWheelEvent(self_: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseSourceEvent(self_: *mut ImGuiIO, source: ImGuiMouseSource);
}
extern "C" {
    pub fn ImGuiIO_AddMouseViewportEvent(self_: *mut ImGuiIO, id: ImGuiID);
}
extern "C" {
    pub fn ImGuiIO_AddFocusEvent(self_: *mut ImGuiIO, focused: bool);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGuiIO_SetKeyEventNativeData(
        self_: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiIO_SetKeyEventNativeDataEx(
        self_: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiIO_SetAppAcceptingEvents(self_: *mut ImGuiIO, accepting_events: bool);
}
extern "C" {
    pub fn ImGuiIO_ClearEventsQueue(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ClearInputKeys(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ClearInputCharacters(self_: *mut ImGuiIO);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData_t {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputTextCallbackData_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData_t>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventFlag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventChar) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventKey) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufTextLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufDirty) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionStart) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionEnd) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData_t),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(
        self_: *const ImGuiInputTextCallbackData,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData_t {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSizeCallbackData_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData_t>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData_t),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData_t),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData_t),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DesiredSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData_t),
            "::",
            stringify!(DesiredSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass_t {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowClass_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass_t>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideSet) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(ViewportFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideClear) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(ViewportFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabItemFlagsOverrideSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(TabItemFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNodeFlagsOverrideSet) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(DockNodeFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAlwaysTabBar) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(DockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAllowUnclassed) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass_t),
            "::",
            stringify!(DockingAllowUnclassed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload_t {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPayload_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload_t>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceParentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataFrameCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Preview) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(Preview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Delivery) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload_t),
            "::",
            stringify!(Delivery)
        )
    );
}
extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_IsDataType(
        self_: *const ImGuiPayload,
        type_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *const ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *const ImGuiPayload) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs_t {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSortSpecs_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableColumnSortSpecs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSortSpecs_t>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSortSpecs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSortSpecs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSortSpecs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnUserID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs_t),
            "::",
            stringify!(ColumnUserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs_t),
            "::",
            stringify!(ColumnIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs_t),
            "::",
            stringify!(SortOrder)
        )
    );
}
impl ImGuiTableColumnSortSpecs_t {
    #[inline]
    pub fn SortDirection(&self) -> ImGuiSortDirection {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImGuiSortDirection) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImGuiSortDirection,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SortDirection: u32 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs_t {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSortSpecs_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableSortSpecs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSortSpecs_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSortSpecs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSortSpecs_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableSortSpecs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Specs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs_t),
            "::",
            stringify!(Specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs_t),
            "::",
            stringify!(SpecsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsDirty) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs_t),
            "::",
            stringify!(SpecsDirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_ImGuiTextRange_t {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter_ImGuiTextRange_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextFilter_ImGuiTextRange_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter_ImGuiTextRange_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter_ImGuiTextRange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter_ImGuiTextRange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImGuiTextFilter_ImGuiTextRange_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange_t),
            "::",
            stringify!(e)
        )
    );
}
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextRange_empty(
        self_: *const ImGuiTextFilter_ImGuiTextRange,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        self_: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector_ImGuiTextFilter_ImGuiTextRange,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_t {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextFilter_ImGuiTextRange,
    pub CountGrep: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextFilter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter_t>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputBuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_t),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filters) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_t),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CountGrep) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_t),
            "::",
            stringify!(CountGrep)
        )
    );
}
extern "C" {
    pub fn ImGuiTextFilter_Draw(
        self_: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *const ImGuiTextFilter) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextBuffer_t {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextBuffer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextBuffer_t),
            "::",
            stringify!(Buf)
        )
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *const ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *const ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *const ImGuiTextBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *const ImGuiTextBuffer) -> bool;
}
extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *const ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_appendf(
        self_: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_appendfv(
        self_: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStorage_ImGuiStoragePair_t {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStorage_ImGuiStoragePair_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStorage_ImGuiStoragePair_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage_ImGuiStoragePair_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage_ImGuiStoragePair_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage_ImGuiStoragePair_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage_ImGuiStoragePair_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_ImGuiStoragePair_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStorage_t {
    pub Data: ImVector_ImGuiStorage_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImGuiStorage_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStorage_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage_t),
            "::",
            stringify!(Data)
        )
    );
}
extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiStorage_GetBool(
        self_: *const ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *const ImGuiStorage, key: ImGuiID, default_val: f32)
        -> f32;
}
extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(
        self_: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_GetBoolRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    pub fn ImGuiStorage_GetFloatRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipper_t {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiListClipper_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper_t>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiListClipper_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayEnd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsHeight) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StartPosY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(StartPosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper_t),
            "::",
            stringify!(TempData)
        )
    );
}
extern "C" {
    pub fn ImGuiListClipper_Begin(
        self_: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    pub fn ImGuiListClipper_IncludeRangeByIndices(
        self_: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiListClipper_ForceDisplayRangeByIndices(
        self_: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor_t {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImColor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImColor_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImColor_t),
            "::",
            stringify!(Value)
        )
    );
}
extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImColor_HSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32) -> ImColor;
}
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd_t {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmd_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd_t>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(VtxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxOffset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(IdxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElemCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallback) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallbackData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd_t),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
extern "C" {
    pub fn ImDrawCmd_GetTexID(self_: *const ImDrawCmd) -> ImTextureID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert_t {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawVert_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert_t>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert_t),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert_t),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader_t {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmdHeader_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader_t>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader_t),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader_t),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader_t),
            "::",
            stringify!(VtxOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawChannel_t {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImDrawChannel_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawChannel_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel_t>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel_t),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel_t),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSplitter_t {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawListSplitter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter_t>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter_t),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter_t),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter_t),
            "::",
            stringify!(_Channels)
        )
    );
}
extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawList_t {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _OwnerName: *const ::std::os::raw::c_char,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _FringeScale: f32,
}
#[test]
fn bindgen_test_layout_ImDrawList_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawList_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawList_t>(),
        200usize,
        concat!("Size of: ", stringify!(ImDrawList_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(IdxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(VtxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxCurrentIdx) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._OwnerName) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_OwnerName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxWritePtr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxWritePtr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ClipRectStack) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._TextureIdStack) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Path) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdHeader) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Splitter) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_Splitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._FringeScale) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList_t),
            "::",
            stringify!(_FringeScale)
        )
    );
}
extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMin(self_: *const ImDrawList) -> ImVec2;
}
extern "C" {
    pub fn ImDrawList_GetClipRectMax(self_: *const ImDrawList) -> ImVec2;
}
extern "C" {
    pub fn ImDrawList_AddLine(self_: *mut ImDrawList, p1: ImVec2, p2: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_AddLineEx(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRect(self_: *mut ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_AddRectEx(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilledEx(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuadEx(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuadFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangleEx(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangleFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircle(self_: *mut ImDrawList, center: ImVec2, radius: f32, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_AddCircleEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgonEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddText(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddTextEx(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddTextImFontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddTextImFontPtrEx(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierCubic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierQuadratic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageEx(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageQuadEx(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PathStroke(
        self_: *mut ImDrawList,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierCubicCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *const ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimReserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimUnreserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimRectUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__TryMergeDrawCmds(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        self_: *const ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImDrawList__PathArcToFastEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList__PathArcToN(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawData_t {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector_ImDrawListPtr,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawData_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawData_t>(),
        64usize,
        concat!("Size of: ", stringify!(ImDrawData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdListsCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalIdxCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalVtxCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdLists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(CmdLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramebufferScale) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(FramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnerViewport) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData_t),
            "::",
            stringify!(OwnerViewport)
        )
    );
}
extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_AddDrawList(self_: *mut ImDrawData, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig_t {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontConfig_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig_t>(),
        136usize,
        concat!("Size of: ", stringify!(ImFontConfig_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataOwnedByAtlas) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontNo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(FontNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizePixels) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleV) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelSnapH) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphExtraSpacing) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphRanges) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMinAdvanceX) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMaxAdvanceX) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MergeMode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RasterizerMultiply) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DstFont) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig_t),
            "::",
            stringify!(DstFont)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyph_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph_t>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdvanceX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(AdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(X1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(Y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(U0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V0) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(V0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(U1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph_t),
            "::",
            stringify!(V1)
        )
    );
}
impl ImFontGlyph_t {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyphRangesBuilder_t {
    pub UsedChars: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyphRangesBuilder_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UsedChars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder_t),
            "::",
            stringify!(UsedChars)
        )
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(
        self_: *const ImFontGlyphRangesBuilder,
        n: usize,
    ) -> bool;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect_t {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlasCustomRect_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect_t>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphAdvanceX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect_t),
            "::",
            stringify!(Font)
        )
    );
}
extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *const ImFontAtlasCustomRect) -> bool;
}
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlas_t {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub Locked: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlas_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas_t>(),
        1184usize,
        concat!("Size of: ", stringify!(ImFontAtlas_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexDesiredWidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexGlyphPadding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Locked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(Locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexReady) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexReady)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsUseColors) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexPixelsUseColors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsAlpha8) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsRGBA32) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexWidth) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexHeight) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CustomRects) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderIO) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(FontBuilderIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdMouseCursors) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdLines) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas_t),
            "::",
            stringify!(PackIdLines)
        )
    );
}
extern "C" {
    pub fn ImFontAtlas_AddFont(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontDefault(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *const ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesGreek(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        self_: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::std::os::raw::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *const ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFont_t {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub EllipsisCharCount: ::std::os::raw::c_short,
    pub EllipsisWidth: f32,
    pub EllipsisCharStep: f32,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImFont_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFont_t>(),
        120usize,
        concat!("Size of: ", stringify!(ImFont_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexAdvanceX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(IndexAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackAdvanceX) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexLookup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(IndexLookup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Glyphs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(Glyphs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackGlyph) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(FallbackGlyph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContainerAtlas) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDataCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackChar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(FallbackChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharCount) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(EllipsisCharCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisWidth) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(EllipsisWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharStep) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(EllipsisCharStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirtyLookupTables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ascent) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(Ascent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Descent) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(Descent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsTotalSurface) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Used4kPagesMap) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont_t),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
extern "C" {
    pub fn ImFont_FindGlyph(self_: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *const ImFont, c: ImWchar) -> f32;
}
extern "C" {
    pub fn ImFont_IsLoaded(self_: *const ImFont) -> bool;
}
extern "C" {
    pub fn ImFont_GetDebugName(self_: *const ImFont) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_CalcTextSizeA(
        self_: *const ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
extern "C" {
    pub fn ImFont_CalcTextSizeAEx(
        self_: *const ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *const ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_RenderChar(
        self_: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    pub fn ImFont_RenderText(
        self_: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewport_t {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiViewport_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport_t>(),
        96usize,
        concat!("Size of: ", stringify!(ImGuiViewport_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RendererUserData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(RendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformUserData) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandleRaw) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformHandleRaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformWindowCreated) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformWindowCreated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestMove) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformRequestMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestResize) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformRequestResize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestClose) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport_t),
            "::",
            stringify!(PlatformRequestClose)
        )
    );
}
extern "C" {
    pub fn ImGuiViewport_GetCenter(self_: *const ImGuiViewport) -> ImVec2;
}
extern "C" {
    pub fn ImGuiViewport_GetWorkCenter(self_: *const ImGuiViewport) -> ImVec2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformIO_t {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformIO_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO_t>(),
        216usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateWindow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_DestroyWindow) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_ShowWindow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_ShowWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_GetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_GetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowFocus) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowFocus) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_GetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowMinimized) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_GetWindowMinimized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowTitle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SetWindowTitle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowAlpha) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SetWindowAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_UpdateWindow) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_UpdateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_RenderWindow) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SwapBuffers) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowDpiScale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_GetWindowDpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_OnChangedViewport) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_OnChangedViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateVkSurface) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Platform_CreateVkSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_CreateWindow) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Renderer_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_DestroyWindow) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Renderer_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SetWindowSize) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Renderer_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_RenderWindow) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Renderer_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SwapBuffers) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Renderer_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Monitors) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Monitors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO_t),
            "::",
            stringify!(Viewports)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor_t {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformMonitor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainPos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(MainPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(MainSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor_t),
            "::",
            stringify!(PlatformHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData_t {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformImeData_t() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformImeData_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformImeData_t>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPlatformImeData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformImeData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformImeData_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantVisible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData_t),
            "::",
            stringify!(WantVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputPos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData_t),
            "::",
            stringify!(InputPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputLineHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData_t),
            "::",
            stringify!(InputLineHeight)
        )
    );
}
extern "C" {
    pub fn GetKeyIndex(key: ImGuiKey) -> ImGuiKey;
}
extern "C" {
    pub fn ImGui_SetItemAllowOverlap();
}
extern "C" {
    pub fn ImGui_PushAllowKeyboardFocus(tab_stop: bool);
}
extern "C" {
    pub fn ImGui_PopAllowKeyboardFocus();
}
extern "C" {
    pub fn ImGui_ImageButtonImTextureID(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        frame_padding: ::std::os::raw::c_int,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn ImGui_CaptureKeyboardFromApp(want_capture_keyboard: bool);
}
extern "C" {
    pub fn ImGui_CaptureMouseFromApp(want_capture_mouse: bool);
}
extern "C" {
    pub fn ImGui_CalcListClipping(
        items_count: ::std::os::raw::c_int,
        items_height: f32,
        out_items_display_start: *mut ::std::os::raw::c_int,
        out_items_display_end: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGui_GetWindowContentRegionWidth() -> f32;
}
pub type ImDrawCornerFlags = ImDrawFlags;
pub const ImDrawCornerFlags__ImDrawCornerFlags_None: ImDrawCornerFlags_ = 256;
pub const ImDrawCornerFlags__ImDrawCornerFlags_TopLeft: ImDrawCornerFlags_ = 16;
pub const ImDrawCornerFlags__ImDrawCornerFlags_TopRight: ImDrawCornerFlags_ = 32;
pub const ImDrawCornerFlags__ImDrawCornerFlags_BotLeft: ImDrawCornerFlags_ = 64;
pub const ImDrawCornerFlags__ImDrawCornerFlags_BotRight: ImDrawCornerFlags_ = 128;
pub const ImDrawCornerFlags__ImDrawCornerFlags_All: ImDrawCornerFlags_ = 240;
pub const ImDrawCornerFlags__ImDrawCornerFlags_Top: ImDrawCornerFlags_ = 48;
pub const ImDrawCornerFlags__ImDrawCornerFlags_Bot: ImDrawCornerFlags_ = 192;
pub const ImDrawCornerFlags__ImDrawCornerFlags_Left: ImDrawCornerFlags_ = 80;
pub const ImDrawCornerFlags__ImDrawCornerFlags_Right: ImDrawCornerFlags_ = 160;
pub type ImDrawCornerFlags_ = ::std::os::raw::c_int;
pub type ImGuiModFlags = ImGuiKeyChord;
pub const ImGuiModFlags__ImGuiModFlags_None: ImGuiModFlags_ = 0;
pub const ImGuiModFlags__ImGuiModFlags_Ctrl: ImGuiModFlags_ = 4096;
pub const ImGuiModFlags__ImGuiModFlags_Shift: ImGuiModFlags_ = 8192;
pub const ImGuiModFlags__ImGuiModFlags_Alt: ImGuiModFlags_ = 16384;
pub const ImGuiModFlags__ImGuiModFlags_Super: ImGuiModFlags_ = 32768;
pub type ImGuiModFlags_ = ::std::os::raw::c_int;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
